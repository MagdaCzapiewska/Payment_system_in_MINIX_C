diff -rupNEZbB oryginalne-zrodla/usr/include/minix/callnr.h moje-rozwiazanie/usr/include/minix/callnr.h
--- oryginalne-zrodla/usr/include/minix/callnr.h	2014-09-14 11:00:44.000000000 +0200
+++ moje-rozwiazanie/usr/include/minix/callnr.h	2023-05-14 18:43:36.109532475 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_TRANSFER_MONEY   (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB oryginalne-zrodla/usr/include/minix/config.h moje-rozwiazanie/usr/include/minix/config.h
--- oryginalne-zrodla/usr/include/minix/config.h	2014-09-14 11:00:44.000000000 +0200
+++ moje-rozwiazanie/usr/include/minix/config.h	2023-05-14 18:40:39.340868788 +0200
@@ -95,4 +95,8 @@
 #define NR_PCIBUS 40
 #define NR_PCIDEV 50
 
+/* Constants used for PM_TRANSFERMONEY */
+#define INIT_BALANCE 100
+#define MAX_BALANCE 1000
+
 #endif /* _CONFIG_H */
diff -rupNEZbB oryginalne-zrodla/usr/include/minix/ipc.h moje-rozwiazanie/usr/include/minix/ipc.h
--- oryginalne-zrodla/usr/include/minix/ipc.h	2014-09-14 11:00:44.000000000 +0200
+++ moje-rozwiazanie/usr/include/minix/ipc.h	2023-05-14 18:41:42.641103617 +0200
@@ -89,6 +89,14 @@ typedef struct {
 } mess_10;
 _ASSERT_MSG_SIZE(mess_10);
 
+/* Message for transfering */
+typedef struct {
+	pid_t recipient;
+	int amount;
+	uint8_t padding[48];
+} mess_transfer;
+_ASSERT_MSG_SIZE(mess_transfer);
+
 /* Helper union for DS messages */
 union	ds_val {
 	cp_grant_id_t	grant;
@@ -2251,6 +2259,7 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+		mess_transfer 		m_transfer;
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff -rupNEZbB oryginalne-zrodla/usr/include/unistd.h moje-rozwiazanie/usr/include/unistd.h
--- oryginalne-zrodla/usr/include/unistd.h	2014-09-14 11:00:43.000000000 +0200
+++ moje-rozwiazanie/usr/include/unistd.h	2023-05-14 18:45:01.933862548 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+/* For calling syscall PM_TRANSFER_MONEY */
+int transfermoney(pid_t, int);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB oryginalne-zrodla/usr/src/include/unistd.h moje-rozwiazanie/usr/src/include/unistd.h
--- oryginalne-zrodla/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/include/unistd.h	2023-05-14 17:27:29.772067000 +0200
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+/* For calling syscall PM_TRANSFER_MONEY */
+int transfermoney(pid_t, int);
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupNEZbB oryginalne-zrodla/usr/src/lib/libc/misc/Makefile.inc moje-rozwiazanie/usr/src/lib/libc/misc/Makefile.inc
--- oryginalne-zrodla/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/lib/libc/misc/Makefile.inc	2023-05-14 20:27:36.437713573 +0200
@@ -8,3 +8,6 @@ SRCS+=	initfini.c
 
 # for -fstack-protector
 SRCS+=	stack_protector.c
+
+# for transfermoney
+SRCS += transfermoney.c
\ No newline at end of file
diff -rupNEZbB oryginalne-zrodla/usr/src/lib/libc/misc/transfermoney.c moje-rozwiazanie/usr/src/lib/libc/misc/transfermoney.c
--- oryginalne-zrodla/usr/src/lib/libc/misc/transfermoney.c	1970-01-01 01:00:00.000000000 +0100
+++ moje-rozwiazanie/usr/src/lib/libc/misc/transfermoney.c	2023-05-14 20:29:12.474065662 +0200
@@ -0,0 +1,30 @@
+/* Library function created to enable calling
+ * PM_TRANSFER_MONEY syscall provided by pm server.
+*/
+
+#include <lib.h>
+#include <minix/rs.h>
+
+int get_pm_endpt(endpoint_t *pt)
+{
+    return minix_rs_lookup("pm", pt);
+}
+
+int transfermoney(pid_t recipient, int amount)
+{
+    endpoint_t pm_pt;
+    message m;
+    if (get_pm_endpt(&pm_pt) != 0)
+    {
+            errno = ENOSYS;
+            return -1;
+    }
+    m.m_transfer.recipient = recipient;
+    m.m_transfer.amount = amount;
+
+    int new_balance = _syscall(pm_pt, PM_TRANSFER_MONEY, &m);
+    if (new_balance < 0) {
+        return -1;
+    }
+    return new_balance;
+}
\ No newline at end of file
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/callnr.h moje-rozwiazanie/usr/src/minix/include/minix/callnr.h
--- oryginalne-zrodla/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/callnr.h	2023-05-14 17:20:25.417449000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_TRANSFER_MONEY   (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/config.h moje-rozwiazanie/usr/src/minix/include/minix/config.h
--- oryginalne-zrodla/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/config.h	2023-05-14 17:10:55.247709000 +0200
@@ -95,4 +95,8 @@
 #define NR_PCIBUS 40
 #define NR_PCIDEV 50
 
+/* Constants used for PM_TRANSFERMONEY */
+#define INIT_BALANCE 100
+#define MAX_BALANCE 1000
+
 #endif /* _CONFIG_H */
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/include/minix/ipc.h moje-rozwiazanie/usr/src/minix/include/minix/ipc.h
--- oryginalne-zrodla/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/include/minix/ipc.h	2023-05-14 17:13:53.588228000 +0200
@@ -89,6 +89,14 @@ typedef struct {
 } mess_10;
 _ASSERT_MSG_SIZE(mess_10);
 
+/* Message for transfering */
+typedef struct {
+	pid_t recipient;
+	int amount;
+	uint8_t padding[48];
+} mess_transfer;
+_ASSERT_MSG_SIZE(mess_transfer);
+
 /* Helper union for DS messages */
 union	ds_val {
 	cp_grant_id_t	grant;
@@ -2251,6 +2259,7 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+		mess_transfer 		m_transfer;
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/do_transfermoney.c moje-rozwiazanie/usr/src/minix/servers/pm/do_transfermoney.c
--- oryginalne-zrodla/usr/src/minix/servers/pm/do_transfermoney.c	1970-01-01 01:00:00.000000000 +0100
+++ moje-rozwiazanie/usr/src/minix/servers/pm/do_transfermoney.c	2023-05-14 20:26:34.421488541 +0200
@@ -0,0 +1,69 @@
+/* This file deals with transfering money between the processes.
+ *
+ * The entry points into this file are:
+ *   do_transfermoney: performs the PM_TRANSFER_MONEY system call
+ */
+
+#include "pm.h"
+#include "mproc.h"
+
+int ancestor_and_descendant(pid_t proc_1, pid_t proc_2)
+{
+    struct mproc *proc = find_proc(proc_1);
+    int parent_index = proc->mp_parent;
+
+    while (mproc[parent_index].mp_pid != proc_2 && mproc[parent_index].mp_pid != 1)
+    {
+        parent_index = mproc[parent_index].mp_parent;
+    }
+    if (mproc[parent_index].mp_pid == proc_2)
+    {
+        return 1;
+    }
+
+    proc = find_proc(proc_2);
+    parent_index = proc->mp_parent;
+
+    while (mproc[parent_index].mp_pid != proc_1 && mproc[parent_index].mp_pid != 1)
+    {
+        parent_index = mproc[parent_index].mp_parent;
+    }
+    if (mproc[parent_index].mp_pid == proc_1)
+    {
+        return 1;
+    }
+    return 0;
+}
+
+
+/*===========================================================================*
+ *				do_transfermoney				     *
+ *===========================================================================*/
+int do_transfermoney(void)
+{
+/* Transfer money between process calling syscall and recipient process.
+ */
+    register struct mproc *current_proc = mp;
+    struct mproc *recipient_proc;
+
+    recipient_proc = find_proc(m_in.m_transfer.recipient);
+    if (recipient_proc == NULL || recipient_proc->mp_flags & EXITING)
+    {
+        return ESRCH;
+    }
+
+    if (ancestor_and_descendant(current_proc->mp_pid, recipient_proc->mp_pid))
+    {
+        return EPERM;
+    }
+
+    if (m_in.m_transfer.amount < 0 || current_proc->balance < m_in.m_transfer.amount
+        || recipient_proc->balance > MAX_BALANCE - m_in.m_transfer.amount)
+    {
+        return EINVAL;
+    }
+    
+    current_proc->balance -= m_in.m_transfer.amount;
+    recipient_proc->balance += m_in.m_transfer.amount;
+    return current_proc->balance;
+}
\ No newline at end of file
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/forkexit.c moje-rozwiazanie/usr/src/minix/servers/pm/forkexit.c
--- oryginalne-zrodla/usr/src/minix/servers/pm/forkexit.c	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/forkexit.c	2023-05-14 17:18:19.497048000 +0200
@@ -113,6 +113,9 @@ int do_fork()
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
 
+  /* Set initial balance. */
+  rmc->balance = INIT_BALANCE;
+
   memset(&m, 0, sizeof(m));
   m.m_type = VFS_PM_FORK;
   m.VFS_PM_ENDPT = rmc->mp_endpoint;
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/main.c moje-rozwiazanie/usr/src/minix/servers/pm/main.c
--- oryginalne-zrodla/usr/src/minix/servers/pm/main.c	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/main.c	2023-05-14 18:09:30.317156281 +0200
@@ -143,10 +143,11 @@ static int sef_cb_init_fresh(int UNUSED(
   register char *sig_ptr;
   message mess;
 
-  /* Initialize process table, including timers. */
+  /* Initialize process table, including timers and balance. */
   for (rmp=&mproc[0]; rmp<&mproc[NR_PROCS]; rmp++) {
 	init_timer(&rmp->mp_timer);
 	rmp->mp_magic = MP_MAGIC;
+	rmp->balance = INIT_BALANCE;
   }
 
   /* Build the set of signals which cause core dumps, and the set of signals
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/Makefile moje-rozwiazanie/usr/src/minix/servers/pm/Makefile
--- oryginalne-zrodla/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/Makefile	2023-05-14 17:23:58.026139000 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c do_transfermoney.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/mproc.h moje-rozwiazanie/usr/src/minix/servers/pm/mproc.h
--- oryginalne-zrodla/usr/src/minix/servers/pm/mproc.h	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/mproc.h	2023-05-14 18:23:41.496940841 +0200
@@ -70,6 +70,8 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+
+  int balance;      /* amount of money owned by a process */
 } mproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/proto.h moje-rozwiazanie/usr/src/minix/servers/pm/proto.h
--- oryginalne-zrodla/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/proto.h	2023-05-14 17:21:21.869631000 +0200
@@ -82,6 +82,9 @@ int do_settime(void);
 int do_trace(void);
 void trace_stop(struct mproc *rmp, int signo);
 
+/* transfermoney.c */
+int do_transfermoney(void);
+
 /* utility.c */
 pid_t get_free_pid(void);
 char *find_param(const char *key);
diff -rupNEZbB oryginalne-zrodla/usr/src/minix/servers/pm/table.c moje-rozwiazanie/usr/src/minix/servers/pm/table.c
--- oryginalne-zrodla/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ moje-rozwiazanie/usr/src/minix/servers/pm/table.c	2023-05-14 17:23:18.282009000 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_TRANSFER_MONEY) = do_transfermoney /* transfermoney(2) */
 };
